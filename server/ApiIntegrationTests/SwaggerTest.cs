// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------
//
// #pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
// #pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
// #pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
// #pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
// #pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
// #pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
// #pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
// #pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
// #pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
// #pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
// #pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
// #pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
// #pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."
//
// namespace Generated
// {
//     using System = global::System;
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Client 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public Client(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> GetAsync()
//         {
//             return GetAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> GetAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: ""
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class AdminUserManagementClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public AdminUserManagementClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<UsersDetailsPageResultDto>> GetUsersDetailsAsync(string adminId, int? page, int? pageSize)
//         {
//             return GetUsersDetailsAsync(adminId, page, pageSize, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<UsersDetailsPageResultDto>> GetUsersDetailsAsync(string adminId, int? page, int? pageSize, System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/users-management"
//                     urlBuilder_.Append("api/admin/users-management");
//                     urlBuilder_.Append('?');
//                     if (adminId != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("adminId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(adminId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     if (page != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     if (pageSize != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     urlBuilder_.Length--;
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<UsersDetailsPageResultDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<UsersDetailsPageResultDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> DeleteUserAsync(string userId)
//         {
//             return DeleteUserAsync(userId, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> DeleteUserAsync(string userId, System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/delete-user"
//                     urlBuilder_.Append("api/admin/delete-user");
//                     urlBuilder_.Append('?');
//                     if (userId != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     urlBuilder_.Length--;
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class AuthClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public AuthClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<LoginResponse>> LoginAsync(LoginRequest data)
//         {
//             return LoginAsync(data, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<LoginResponse>> LoginAsync(LoginRequest data, System.Threading.CancellationToken cancellationToken)
//         {
//             if (data == null)
//                 throw new System.ArgumentNullException("data");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(data, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/login"
//                     urlBuilder_.Append("api/auth/login");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<LoginResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<LoginResponse>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<UsersDetailsDto>> RegisterAsync(RegisterRequest data)
//         {
//             return RegisterAsync(data, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<UsersDetailsDto>> RegisterAsync(RegisterRequest data, System.Threading.CancellationToken cancellationToken)
//         {
//             if (data == null)
//                 throw new System.ArgumentNullException("data");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(data, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/create-user"
//                     urlBuilder_.Append("api/auth/create-user");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<UsersDetailsDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<UsersDetailsDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> InitPasswordResetAsync(InitPasswordResetRequest data)
//         {
//             return InitPasswordResetAsync(data, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> InitPasswordResetAsync(InitPasswordResetRequest data, System.Threading.CancellationToken cancellationToken)
//         {
//             if (data == null)
//                 throw new System.ArgumentNullException("data");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(data, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/init-password-reset"
//                     urlBuilder_.Append("api/auth/init-password-reset");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<UsersDetailsDto>> UpdateUserAsync(UpdateUserDto request)
//         {
//             return UpdateUserAsync(request, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<UsersDetailsDto>> UpdateUserAsync(UpdateUserDto request, System.Threading.CancellationToken cancellationToken)
//         {
//             if (request == null)
//                 throw new System.ArgumentNullException("request");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("PUT");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/update-user"
//                     urlBuilder_.Append("api/auth/update-user");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<UsersDetailsDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<UsersDetailsDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> LogoutAsync()
//         {
//             return LogoutAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> LogoutAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/logout"
//                     urlBuilder_.Append("api/auth/logout");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<AuthUserInfo>> UserInfoAsync()
//         {
//             return UserInfoAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<AuthUserInfo>> UserInfoAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/userinfo"
//                     urlBuilder_.Append("api/auth/userinfo");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<AuthUserInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<AuthUserInfo>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<ResetPasswordResponse>> ResetPasswordAsync(ResetPasswordDto resetPasswordDto)
//         {
//             return ResetPasswordAsync(resetPasswordDto, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResetPasswordResponse>> ResetPasswordAsync(ResetPasswordDto resetPasswordDto, System.Threading.CancellationToken cancellationToken)
//         {
//             if (resetPasswordDto == null)
//                 throw new System.ArgumentNullException("resetPasswordDto");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(resetPasswordDto, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/reset"
//                     urlBuilder_.Append("api/auth/reset");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ResetPasswordResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<ResetPasswordResponse>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> PasswordResetAsync(PasswordResetRequest data)
//         {
//             return PasswordResetAsync(data, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> PasswordResetAsync(PasswordResetRequest data, System.Threading.CancellationToken cancellationToken)
//         {
//             if (data == null)
//                 throw new System.ArgumentNullException("data");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(data, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/auth/password-reset"
//                     urlBuilder_.Append("api/auth/password-reset");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PaymentClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public PaymentClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<UpdatedBalanceResponse>> UploadImageAsync(string contentType, string contentDisposition, System.Collections.Generic.IEnumerable<object> headers, long? length, string name, string fileName, int? topUpValue, string authUserId, string transactionId)
//         {
//             return UploadImageAsync(contentType, contentDisposition, headers, length, name, fileName, topUpValue, authUserId, transactionId, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<UpdatedBalanceResponse>> UploadImageAsync(string contentType, string contentDisposition, System.Collections.Generic.IEnumerable<object> headers, long? length, string name, string fileName, int? topUpValue, string authUserId, string transactionId, System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var boundary_ = System.Guid.NewGuid().ToString();
//                     var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
//                     content_.Headers.Remove("Content-Type");
//                     content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
//
//                     if (contentType != null)
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(contentType, System.Globalization.CultureInfo.InvariantCulture)), "ContentType");
//                     }
//
//                     if (contentDisposition != null)
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(contentDisposition, System.Globalization.CultureInfo.InvariantCulture)), "ContentDisposition");
//                     }
//
//                     if (headers != null)
//                     {
//                         foreach (var item_ in headers)
//                         {
//                             content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "Headers");
//                         }
//                     }
//
//                     if (length == null)
//                         throw new System.ArgumentNullException("length");
//                     else
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture)), "Length");
//                     }
//
//                     if (name != null)
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "Name");
//                     }
//
//                     if (fileName != null)
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture)), "FileName");
//                     }
//
//                     if (topUpValue == null)
//                         throw new System.ArgumentNullException("topUpValue");
//                     else
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(topUpValue, System.Globalization.CultureInfo.InvariantCulture)), "topUpValue");
//                     }
//
//                     if (authUserId != null)
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(authUserId, System.Globalization.CultureInfo.InvariantCulture)), "authUserId");
//                     }
//
//                     if (transactionId != null)
//                     {
//                         content_.Add(new System.Net.Http.StringContent(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)), "transactionId");
//                     }
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "user/balance"
//                     urlBuilder_.Append("user/balance");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<UpdatedBalanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<UpdatedBalanceResponse>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<PaymentPageResultDtoOfPaymentDto>> GetUserPendingPaymentsAsync(int? page, int? pageSize)
//         {
//             return GetUserPendingPaymentsAsync(page, pageSize, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<PaymentPageResultDtoOfPaymentDto>> GetUserPendingPaymentsAsync(int? page, int? pageSize, System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/adminPayment/pendingPayments"
//                     urlBuilder_.Append("api/adminPayment/pendingPayments");
//                     urlBuilder_.Append('?');
//                     if (page != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     if (pageSize != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     urlBuilder_.Length--;
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<PaymentPageResultDtoOfPaymentDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<PaymentPageResultDtoOfPaymentDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> UpdatePendingPaymentsAsync(UpdatePaymentDto updatePaymentDto)
//         {
//             return UpdatePendingPaymentsAsync(updatePaymentDto, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> UpdatePendingPaymentsAsync(UpdatePaymentDto updatePaymentDto, System.Threading.CancellationToken cancellationToken)
//         {
//             if (updatePaymentDto == null)
//                 throw new System.ArgumentNullException("updatePaymentDto");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(updatePaymentDto, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/adminPayment/updatePendingPayments"
//                     urlBuilder_.Append("api/adminPayment/updatePendingPayments");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> DeclinePendingPaymentsAsync(DeclinePaymentDto declinePaymentDto)
//         {
//             return DeclinePendingPaymentsAsync(declinePaymentDto, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> DeclinePendingPaymentsAsync(DeclinePaymentDto declinePaymentDto, System.Threading.CancellationToken cancellationToken)
//         {
//             if (declinePaymentDto == null)
//                 throw new System.ArgumentNullException("declinePaymentDto");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(declinePaymentDto, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/adminPayment/declinePendingPayments"
//                     urlBuilder_.Append("api/adminPayment/declinePendingPayments");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PlayClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public PlayClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<ValueTupleOfCurrentBalanceDtoAndListOfAutomatedTicketsDto>> CreateGameTicketAsync(System.Collections.Generic.IEnumerable<CreateTicketDto> tickets)
//         {
//             return CreateGameTicketAsync(tickets, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<ValueTupleOfCurrentBalanceDtoAndListOfAutomatedTicketsDto>> CreateGameTicketAsync(System.Collections.Generic.IEnumerable<CreateTicketDto> tickets, System.Threading.CancellationToken cancellationToken)
//         {
//             if (tickets == null)
//                 throw new System.ArgumentNullException("tickets");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(tickets, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/play/gameTickets"
//                     urlBuilder_.Append("api/play/gameTickets");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ValueTupleOfCurrentBalanceDtoAndListOfAutomatedTicketsDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<ValueTupleOfCurrentBalanceDtoAndListOfAutomatedTicketsDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AutomatedTicketsDto>>> GetAutomatedTicketsAsync(string userId)
//         {
//             return GetAutomatedTicketsAsync(userId, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AutomatedTicketsDto>>> GetAutomatedTicketsAsync(string userId, System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/play"
//                     urlBuilder_.Append("api/play");
//                     urlBuilder_.Append('?');
//                     if (userId != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     urlBuilder_.Length--;
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AutomatedTicketsDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<System.Collections.Generic.ICollection<AutomatedTicketsDto>>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<GameIdDto>> CheckIsAllowedToPlayAsync()
//         {
//             return CheckIsAllowedToPlayAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<GameIdDto>> CheckIsAllowedToPlayAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/play/checkIsAllowedToPlay"
//                     urlBuilder_.Append("api/play/checkIsAllowedToPlay");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<GameIdDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<GameIdDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> DeleteAutomatedTicketAsync(AutomatedTicketsDto ticket)
//         {
//             return DeleteAutomatedTicketAsync(ticket, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> DeleteAutomatedTicketAsync(AutomatedTicketsDto ticket, System.Threading.CancellationToken cancellationToken)
//         {
//             if (ticket == null)
//                 throw new System.ArgumentNullException("ticket");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(ticket, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/play/deleteAutomatedTicket"
//                     urlBuilder_.Append("api/play/deleteAutomatedTicket");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<FileResponse> UpdateAutomatedTicketStatusAsync(UpdateAutomatedTicketStatusRequest request)
//         {
//             return UpdateAutomatedTicketStatusAsync(request, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<FileResponse> UpdateAutomatedTicketStatusAsync(UpdateAutomatedTicketStatusRequest request, System.Threading.CancellationToken cancellationToken)
//         {
//             if (request == null)
//                 throw new System.ArgumentNullException("request");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("PUT");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/play/updateAutomatedTicketStatus"
//                     urlBuilder_.Append("api/play/updateAutomatedTicketStatus");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200 || status_ == 206)
//                         {
//                             var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                             var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                             disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                             return fileResponse_;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UserClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public UserClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<GameTicketsPageResultDto>> GetUserTicketsHistoryAsync(string userId, int? page, int? pageSize)
//         {
//             return GetUserTicketsHistoryAsync(userId, page, pageSize, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<GameTicketsPageResultDto>> GetUserTicketsHistoryAsync(string userId, int? page, int? pageSize, System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/user/history"
//                     urlBuilder_.Append("api/user/history");
//                     urlBuilder_.Append('?');
//                     if (userId != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     if (page != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     if (pageSize != null)
//                     {
//                         urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                     }
//                     urlBuilder_.Length--;
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<GameTicketsPageResultDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<GameTicketsPageResultDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ConfigurationClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public ConfigurationClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, TicketPriceDto>>> GetTicketPricesAsync()
//         {
//             return GetTicketPricesAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, TicketPriceDto>>> GetTicketPricesAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "ticketPrices"
//                     urlBuilder_.Append("ticketPrices");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, TicketPriceDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<System.Collections.Generic.IDictionary<string, TicketPriceDto>>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<int>>> GetTopUpPricesAsync()
//         {
//             return GetTopUpPricesAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<int>>> GetTopUpPricesAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "topUpPrices"
//                     urlBuilder_.Append("topUpPrices");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<System.Collections.Generic.ICollection<int>>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GameHandlerClient 
//     {
//         #pragma warning disable 8618
//         private string _baseUrl;
//         #pragma warning restore 8618
//
//         private System.Net.Http.HttpClient _httpClient;
//         private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;
//
//     #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         public GameHandlerClient(System.Net.Http.HttpClient httpClient)
//     #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//         {
//             BaseUrl = "http://localhost:5000";
//             _httpClient = httpClient;
//             Initialize();
//         }
//
//         private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }
//
//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set
//             {
//                 _baseUrl = value;
//                 if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                     _baseUrl += '/';
//             }
//         }
//
//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }
//
//         static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
//
//         partial void Initialize();
//
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<CurrentGameDto>> GetCurrentGamInfoAsync()
//         {
//             return GetCurrentGamInfoAsync(System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<CurrentGameDto>> GetCurrentGamInfoAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/currentGame"
//                     urlBuilder_.Append("api/admin/currentGame");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<CurrentGameDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<CurrentGameDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<ProcessedWinningSequence>> SetWinningNumbersAsync(WinningSequenceDto winningSequence)
//         {
//             return SetWinningNumbersAsync(winningSequence, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<ProcessedWinningSequence>> SetWinningNumbersAsync(WinningSequenceDto winningSequence, System.Threading.CancellationToken cancellationToken)
//         {
//             if (winningSequence == null)
//                 throw new System.ArgumentNullException("winningSequence");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(winningSequence, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/settWinningSequence"
//                     urlBuilder_.Append("api/admin/settWinningSequence");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProcessedWinningSequence>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<ProcessedWinningSequence>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<WinningPlayersDto>> GetWinningPlayersAsync(WinningPlayersRequestDto playersRequest)
//         {
//             return GetWinningPlayersAsync(playersRequest, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<WinningPlayersDto>> GetWinningPlayersAsync(WinningPlayersRequestDto playersRequest, System.Threading.CancellationToken cancellationToken)
//         {
//             if (playersRequest == null)
//                 throw new System.ArgumentNullException("playersRequest");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(playersRequest, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/getWinningPlayers"
//                     urlBuilder_.Append("api/admin/getWinningPlayers");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<WinningPlayersDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<WinningPlayersDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<TupleOfListOfCurrentGameDtoAndPagination>> GetGamesAsync(Pagination pagination)
//         {
//             return GetGamesAsync(pagination, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<TupleOfListOfCurrentGameDtoAndPagination>> GetGamesAsync(Pagination pagination, System.Threading.CancellationToken cancellationToken)
//         {
//             if (pagination == null)
//                 throw new System.ArgumentNullException("pagination");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(pagination, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/getGames"
//                     urlBuilder_.Append("api/admin/getGames");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<TupleOfListOfCurrentGameDtoAndPagination>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<TupleOfListOfCurrentGameDtoAndPagination>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<PlayerTicketsResponseDto>> GetWinningTicketsForPlayerAsync(PlayerTicketsRequestDto playerTicketsRequest)
//         {
//             return GetWinningTicketsForPlayerAsync(playerTicketsRequest, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<PlayerTicketsResponseDto>> GetWinningTicketsForPlayerAsync(PlayerTicketsRequestDto playerTicketsRequest, System.Threading.CancellationToken cancellationToken)
//         {
//             if (playerTicketsRequest == null)
//                 throw new System.ArgumentNullException("playerTicketsRequest");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(playerTicketsRequest, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/getWinningTicketsForPlayer"
//                     urlBuilder_.Append("api/admin/getWinningTicketsForPlayer");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<PlayerTicketsResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<PlayerTicketsResponseDto>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CurrentGameDto>>> GetGameByWeekAndYearAsync(GetGameRequestDto gameRequest)
//         {
//             return GetGameByWeekAndYearAsync(gameRequest, System.Threading.CancellationToken.None);
//         }
//
//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CurrentGameDto>>> GetGameByWeekAndYearAsync(GetGameRequestDto gameRequest, System.Threading.CancellationToken cancellationToken)
//         {
//             if (gameRequest == null)
//                 throw new System.ArgumentNullException("gameRequest");
//
//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(gameRequest, JsonSerializerSettings);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
//
//                     var urlBuilder_ = new System.Text.StringBuilder();
//                     if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                     // Operation Path: "api/admin/getGameByWeekAndYear"
//                     urlBuilder_.Append("api/admin/getGameByWeekAndYear");
//
//                     PrepareRequest(client_, request_, urlBuilder_);
//
//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
//
//                     PrepareRequest(client_, request_, url_);
//
//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                         foreach (var item_ in response_.Headers)
//                             headers_[item_.Key] = item_.Value;
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }
//
//                         ProcessResponse(client_, response_);
//
//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CurrentGameDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return new SwaggerResponse<System.Collections.Generic.ICollection<CurrentGameDto>>(status_, headers_, objectResponse_.Object);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }
//
//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }
//
//             public T Object { get; }
//
//             public string Text { get; }
//         }
//
//         public bool ReadResponseAsString { get; set; }
//
//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }
//
//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }
//
//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }
//
//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }
//
//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value is string[])
//             {
//                 return string.Join(",", (string[])value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var valueArray = (System.Array)value;
//                 var valueTextArray = new string[valueArray.Length];
//                 for (var i = 0; i < valueArray.Length; i++)
//                 {
//                     valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                 }
//                 return string.Join(",", valueTextArray);
//             }
//
//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UsersDetailsPageResultDto
//     {
//         [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<UsersDetailsDto> Items { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
//         public int TotalItems { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Always)]
//         public int Page { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Always)]
//         public int PageSize { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UsersDetailsDto
//     {
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Name { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Email { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string PhoneNumber { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.AllowNull)]
//         public bool? IsActive { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class LoginResponse
//     {
//         [Newtonsoft.Json.JsonProperty("jwt", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Jwt { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class LoginRequest
//     {
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Email { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Password { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class RegisterRequest
//     {
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Email { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Name { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Role { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string PhoneNumber { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class InitPasswordResetRequest
//     {
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Email { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UpdateUserDto
//     {
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Name { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Email { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string PhoneNumber { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.AllowNull)]
//         public bool? IsActive { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class AuthUserInfo
//     {
//         [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Username { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("isAdmin", Required = Newtonsoft.Json.Required.Always)]
//         public bool IsAdmin { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("canPlay", Required = Newtonsoft.Json.Required.Always)]
//         public bool CanPlay { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("balanceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int BalanceValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ResetPasswordResponse
//     {
//         [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
//         public bool Success { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Message { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ResetPasswordDto
//     {
//         [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Password { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string UserId { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PasswordResetRequest
//     {
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Email { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Token { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Password { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UpdatedBalanceResponse
//     {
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Name { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("mediaLink", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string MediaLink { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("currentBalanceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int CurrentBalanceValue { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ValueTupleOfCurrentBalanceDtoAndListOfAutomatedTicketsDto
//     {
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class CreateTicketDto
//     {
//         [Newtonsoft.Json.JsonProperty("purchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset PurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string GameId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<int> Sequence { get; set; } = new System.Collections.ObjectModel.Collection<int>();
//
//         [Newtonsoft.Json.JsonProperty("priceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int PriceValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("isAutomated", Required = Newtonsoft.Json.Required.Always)]
//         public bool IsAutomated { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class AutomatedTicketsDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.Guid Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("purchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset PurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<int> Sequence { get; set; } = new System.Collections.ObjectModel.Collection<int>();
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("priceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int PriceValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Always)]
//         public bool IsActive { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GameIdDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Guid { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UpdateAutomatedTicketStatusRequest
//     {
//         [Newtonsoft.Json.JsonProperty("automatedTicket", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public AutomatedTicketsDto AutomatedTicket { get; set; } = new AutomatedTicketsDto();
//
//         [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Always)]
//         public bool IsActive { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GameTicketsPageResultDto
//     {
//         [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<GameTicketDetailedDto> Items { get; set; } = new System.Collections.ObjectModel.Collection<GameTicketDetailedDto>();
//
//         [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
//         public int TotalItems { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Always)]
//         public int Page { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Always)]
//         public int PageSize { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GameTicketDetailedDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.Guid Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string TicketNumber { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("purchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset PurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("formattedPurchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string FormattedPurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<int> Sequence { get; set; } = new System.Collections.ObjectModel.Collection<int>();
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("priceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int PriceValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("extractedNumbers", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<int> ExtractedNumbers { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("winnings", Required = Newtonsoft.Json.Required.AllowNull)]
//         public decimal? Winnings { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string GameId { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class TicketPriceDto
//     {
//         [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset Created { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.DateTimeOffset? Updated { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("numberOfFields", Required = Newtonsoft.Json.Required.Always)]
//         public int NumberOfFields { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
//         public int Price { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PaymentPageResultDtoOfPaymentDto
//     {
//         [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<PaymentDto> Items { get; set; } = new System.Collections.ObjectModel.Collection<PaymentDto>();
//
//         [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
//         public int TotalItems { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Always)]
//         public int Page { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Always)]
//         public int PageSize { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PaymentDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Name { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("bucket", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Bucket { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("timeCreated", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset TimeCreated { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("mediaLink", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string MediaLink { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string TransactionId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
//         public int Value { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserName { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class UpdatePaymentDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
//         public int Value { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset Updated { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class DeclinePaymentDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Name { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("bucket", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Bucket { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserName { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class CurrentGameDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset StartDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("formattedStartDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string FormattedStartDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("extractionDate", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.DateTimeOffset? ExtractionDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("extractedNumbers", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<int> ExtractedNumbers { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.AllowNull)]
//         public int? Revenue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("rolloverValue", Required = Newtonsoft.Json.Required.AllowNull)]
//         public int? RolloverValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
//         public bool Status { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ProcessedWinningSequence
//     {
//         [Newtonsoft.Json.JsonProperty("registered", Required = Newtonsoft.Json.Required.Always)]
//         public bool Registered { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string Message { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("uninsertedTickets", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<InsufficientFundDto> UninsertedTickets { get; set; } = new System.Collections.ObjectModel.Collection<InsufficientFundDto>();
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class InsufficientFundDto
//     {
//         [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserName { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userEmail", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string UserEmail { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("balanceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int BalanceValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("failedToInsertTickets", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<GameTicketDto> FailedToInsertTickets { get; set; } = new System.Collections.ObjectModel.Collection<GameTicketDto>();
//
//         [Newtonsoft.Json.JsonProperty("currentGameDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset CurrentGameDate { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GameTicketDto
//     {
//         [Newtonsoft.Json.JsonProperty("purchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset PurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<int> Sequence { get; set; } = new System.Collections.ObjectModel.Collection<int>();
//
//         [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string UserId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("priceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int PriceValue { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class WinningSequenceDto
//     {
//         [Newtonsoft.Json.JsonProperty("winningSequence", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<int> WinningSequence { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string GameId { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class WinningPlayersDto
//     {
//         [Newtonsoft.Json.JsonProperty("winningPlayers", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<WinningPlayer> WinningPlayers { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.AllowNull)]
//         public Pagination Pagination { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class WinningPlayer
//     {
//         [Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string PlayerId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string UserName { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.AllowNull)]
//         public string Email { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("winningCount", Required = Newtonsoft.Json.Required.Always)]
//         public int WinningCount { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("winningTicketsIds", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<System.Guid> WinningTicketsIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Pagination
//     {
//         [Newtonsoft.Json.JsonProperty("currentPageItems", Required = Newtonsoft.Json.Required.Always)]
//         public int CurrentPageItems { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Always)]
//         public int CurrentPage { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.AllowNull)]
//         public int? NextPage { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("hasNext", Required = Newtonsoft.Json.Required.Always)]
//         public bool HasNext { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
//         public int TotalItems { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class WinningPlayersRequestDto
//     {
//         [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.AllowNull)]
//         public GameIdDto GameId { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.AllowNull)]
//         public Pagination Pagination { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("winningSequence", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<int> WinningSequence { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class TupleOfListOfCurrentGameDtoAndPagination
//     {
//         [Newtonsoft.Json.JsonProperty("item1", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<CurrentGameDto> Item1 { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("item2", Required = Newtonsoft.Json.Required.AllowNull)]
//         public Pagination Item2 { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PlayerTicketsResponseDto
//     {
//         [Newtonsoft.Json.JsonProperty("playerTickets", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<TicketsResponseDto> PlayerTickets { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class TicketsResponseDto
//     {
//         [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.Guid Guid { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("purchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public System.DateTimeOffset PurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("formattedPurchaseDate", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//         public string FormattedPurchaseDate { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("priceValue", Required = Newtonsoft.Json.Required.Always)]
//         public int PriceValue { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("playedNumbers", Required = Newtonsoft.Json.Required.Always)]
//         [System.ComponentModel.DataAnnotations.Required]
//         public System.Collections.Generic.ICollection<int> PlayedNumbers { get; set; } = new System.Collections.ObjectModel.Collection<int>();
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class PlayerTicketsRequestDto
//     {
//         [Newtonsoft.Json.JsonProperty("playerTicketsIds", Required = Newtonsoft.Json.Required.AllowNull)]
//         public System.Collections.Generic.ICollection<System.Guid> PlayerTicketsIds { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GetGameRequestDto
//     {
//         [Newtonsoft.Json.JsonProperty("week", Required = Newtonsoft.Json.Required.Always)]
//         public int Week { get; set; }
//
//         [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
//         public int Year { get; set; }
//
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class FileResponse : System.IDisposable
//     {
//         private System.IDisposable _client;
//         private System.IDisposable _response;
//
//         public int StatusCode { get; private set; }
//
//         public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }
//
//         public System.IO.Stream Stream { get; private set; }
//
//         public bool IsPartial
//         {
//             get { return StatusCode == 206; }
//         }
//
//         public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
//         {
//             StatusCode = statusCode;
//             Headers = headers;
//             Stream = stream;
//             _client = client;
//             _response = response;
//         }
//
//         public void Dispose()
//         {
//             Stream.Dispose();
//             if (_response != null)
//                 _response.Dispose();
//             if (_client != null)
//                 _client.Dispose();
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class SwaggerResponse
//     {
//         public int StatusCode { get; private set; }
//
//         public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }
//
//         public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
//         {
//             StatusCode = statusCode;
//             Headers = headers;
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class SwaggerResponse<TResult> : SwaggerResponse
//     {
//         public TResult Result { get; private set; }
//
//         public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
//             : base(statusCode, headers)
//         {
//             Result = result;
//         }
//     }
//
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ApiException : System.Exception
//     {
//         public int StatusCode { get; private set; }
//
//         public string Response { get; private set; }
//
//         public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }
//
//         public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//             : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//         {
//             StatusCode = statusCode;
//             Response = response;
//             Headers = headers;
//         }
//
//         public override string ToString()
//         {
//             return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//         }
//     }
//
//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ApiException<TResult> : ApiException
//     {
//         public TResult Result { get; private set; }
//
//         public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//             : base(message, statusCode, response, headers, innerException)
//         {
//             Result = result;
//         }
//     }
//
// }
//
// #pragma warning restore  108
// #pragma warning restore  114
// #pragma warning restore  472
// #pragma warning restore  612
// #pragma warning restore 1573
// #pragma warning restore 1591
// #pragma warning restore 8073
// #pragma warning restore 3016
// #pragma warning restore 8603
// #pragma warning restore 8604
// #pragma warning restore 8625